spring:
  application:
    name: Backend
  main:
    allow-bean-definition-overriding: true
  devtools:
    livereload:
      enabled: false

  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_HIKARI_MAX_POOL_SIZE}
      minimum-idle: ${DB_HIKARI_MIN_IDLE}
      idle-timeout: 30000
      max-lifetime: 1800000

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO}
      show-sql: ${JPA_SHOW_SQL}
    properties:
      hibernate:
        format_sql: ${JPA_FORMAT_SQL}
        use_sql_comments: ${JPA_USE_SQL_COMMENTS}
    open-in-view: false

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

  task:
    execution:
      pool:
        core-size: ${TASK_EXECUTION_CORE_SIZE}
        max-size: ${TASK_EXECUTION_MAX_SIZE}
        queue-capacity: ${TASK_EXECUTION_QUEUE_CAPACITY}
        keep-alive: 30s

  servlet:
    multipart:
      max-file-size: ${MULTIPART_MAX_FILE_SIZE}
      max-request-size: ${MULTIPART_MAX_REQUEST_SIZE}

  batch:
    jdbc:
      initialize-schema:  ${BATCH_SCHEMA_INIT}
    job:
      enabled: true

server:
  port: ${SERVER_PORT:8080}
  forward-headers-strategy: framework

jwt:
  secret: ${JWT_SECRET}
  access-expiration: ${JWT_ACCESS_EXPIRATION}
  refresh-expiration: ${JWT_REFRESH_EXPIRATION}
  isLocal: false

email:
  imap_host:
    yandex: ${YANDEX_IMAP_HOST}
    gmail: ${GMAIL_IMAP_HOST}
  imap_port: 993
  imap_ssl_enable: true
  imap_store: ${EMAIL_IMAP_STORE}
  imap_folder: ${EMAIL_IMAP_FOLDER}
  polling_interval_ms: 10000

nlp:
  lemmatizer:
    implementation: external-api
    api-url: ${NLP_LEMMATIZER_API_URL}
    connectTimeoutMillis: 5000
    read-timeout-millis: 30000
  api:
    client:
      embedding-api-url: ${NLP_EMBEDDING_API_URL}
      apiKey: ${NLP_EMBEDDING_API_KEY}
      connection-timeout-millis: 5000
      read-timeout-millis: 30000
      max-batch-size: 50

answersearch:
  weights:
    similarity: 0.7
    trust: 0.3

ml:
  service:
    base-url: ${ML_SERVICE_BASE_URL}
  prompts:
    correction-prompt-template: ${PROMPT_CORRECTION}
    rewrite-instruction-template: ${PROMPT_REWRITE_INSTRUCTION}
    rewrite-prompt-template: ${PROMPT_REWRITE}
  params:
    temperature: 0.7
    max-new-tokens: 150
    top-p: 0.95
    do-sample: false
    stream: false
    max-retries: 3

websocket:
  endpoint: /ws
  allowed-origins:
#    - "http://localhost:3000"
#    - "http://localhost:4200"
    - "*"
  heartbeat:
    interval: 30000
    timeout: 10000
  message:
    buffer-size: 16384
    send-timeout: 3000
  transport-message-size-limit: 131072
  stomp:
    simple-broker:
      enabled: true
      destination-prefixes:
        - /topic/
        - /queue/
    application-destination-prefix: /app
    user-destination-prefix: /user
  topics:
    company:
      pending-chats: ${TOPIC_PENDING_CHATS_COMPANY}
      assigned-chats: ${TOPIC_ASSIGNED_CHATS_COMPANY}
    chat:
      base: ${TOPIC_BASE_CHATS}
      status: ${TOPIC_STATUS_CHATS}
      messages: ${TOPIC_MESSAGES_CHATS}
      typing: ${TOPIC_TYPING_CHATS}
    user:
      base: ${TOPIC_BASE_USER}
      notifications: ${TOPIC_NOTIFICATIONS_USER}
      assigned-chats: ${TOPIC_ASSIGNED_CHATS_USER}
      chat-closed: ${TOPIC_CLOSED_CHAT_USER}
  security:
    jwt:
      header-name: Authorization
      token-prefix: "Bearer "
  broker:
    task-scheduler-pool-size: 2
    inbound-channel-core-pool-size: 4
    inbound-channel-max-pool-size: 8
    outbound-channel-core-pool-size: 4
    outbound-channel-max-pool-size: 8

subscription:
  price: 790







