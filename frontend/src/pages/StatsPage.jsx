import React, { useState, useEffect } from "react";
import Sidebar from "../components/Sidebar.jsx";
import positive from "../assets/positive.png";
import negative from "../assets/negative.png";
import API from "../config/api.js";

const DEFAULT_RANGE = "1h";

const StatCard = ({ title, value, subtitle, trend, trendColor, note, iconSrc }) => (
    <div className="bg-[#f9fafb] shadow-[0px_4px_4px_rgba(0,0,0,0.25)] rounded-xl px-6 py-4 border-black border-2 flex-1 min-w-[250px] max-w-full">
        <div className="flex items-center justify-between mb-2">
            <div className="flex items-center text-xl gap-2">
                <img src={iconSrc} alt="status icon" className="w-6 h-6" />
                <span>{title}</span>
            </div>
        </div>
        <div className="flex items-end justify-between mb-1">
            <div className="text-lg font-bold text-black">{value}</div>
            <div className="text-md text-black leading-tight">{note}</div>
        </div>
        <div className={`text-md font-semibold ${trendColor === 'green' ? 'text-green-600' : 'text-red-600'}`}>
            {subtitle}
        </div>
        <div className="text-md text-green-600">{trend}</div>
    </div>
);

const MessengerStat = ({ name, value, color }) => (
    <div className="space-y-1">
        <div className="flex justify-between">
            <span className="font-medium text-sm">{name}</span>
            <span className="text-sm font-semibold text-black">{value}</span>
        </div>
        <div className="w-full h-5 bg-[#f9fafb] rounded-full overflow-hidden">
            <div className={`h-full rounded-full ${color}`} style={{ width: `${value / 2.15}%` }} />
        </div>
    </div>
);

const StatsPage = () => {
    const [isSidebarOpen, setIsSidebarOpen] = useState(false);
    const [timeRange, setTimeRange] = useState(DEFAULT_RANGE);
    const [statistics, setStatistics] = useState(null);

    const fetchStatistics = async (range = DEFAULT_RANGE) => {
        try {
            const response = await fetch(API.stats.get(range));
            const data = await response.json();
            console.log("üìä –û—Ç–≤–µ—Ç –æ—Ç API:", data);
            setStatistics(data);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
        }
    };

    useEffect(() => {
        fetchStatistics(timeRange);
    }, [timeRange]);

    const timeRanges = [
        { label: "30 –º–∏–Ω—É—Ç", value: "30m" },
        { label: "1 —á–∞—Å", value: "1h" },
        { label: "6 —á–∞—Å–æ–≤", value: "6h" },
        { label: "1 –¥–µ–Ω—å", value: "1d" },
        { label: "7 –¥–Ω–µ–π", value: "7d" }
    ];

    return (
        <div className="flex flex-col lg:flex-row">
            {/* Sidebar toggle */}
            <div className="md:hidden fixed top-4 left-4 z-50">
                <button
                    onClick={() => setIsSidebarOpen(true)}
                    className="text-[#2a4992] focus:outline-none"
                    aria-label="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"
                >
                    <svg className="w-8 h-8" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" d="M4 6h16M4 12h16M4 18h16" />
                    </svg>
                </button>
            </div>

            {/* Sidebar for desktop */}
            <div className="hidden md:block fixed top-0 left-0 h-full w-64 z-40 bg-white shadow-lg border-r border-gray-200">
                <Sidebar />
            </div>

            {/* Sidebar for mobile */}
            {isSidebarOpen && (
                <>
                    <div
                        className="fixed inset-0 z-40"
                        style={{ backgroundColor: "rgba(0, 0, 0, 0.5)" }}
                        onClick={() => setIsSidebarOpen(false)}
                    />
                    <div className="fixed top-0 left-0 w-64 h-full z-50 bg-white shadow-lg overflow-y-auto">
                        <Sidebar />
                        <div className="absolute top-4 right-4">
                            <button
                                onClick={() => setIsSidebarOpen(false)}
                                className="text-gray-600 hover:text-black"
                                aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"
                            >
                                <svg className="w-6 h-6" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </>
            )}

            {/* Main content */}
            <main className="flex-1 bg-[#e6e5ea] p-4 md:p-6 pt-16 sm:pt-6 lg:p-10 space-y-6 md:ml-64">
                <h1 className="text-2xl md:text-3xl font-bold">–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h1>
                <p className="text-black max-w-3xl !text-lg md:text-base">
                    –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–µ –≤ —Å–∏—Å—Ç–µ–º–µ DialogX.
                </p>

                <div className="flex flex-wrap gap-2">
                    {timeRanges.map(({ label, value }) => (
                        <button
                            key={value}
                            onClick={() => setTimeRange(value)}
                            className={`px-3 py-0.5 border-2 rounded-2xl text-sm md:text-base font-medium ${
                                timeRange === value
                                    ? "bg-black text-white border-black"
                                    : "bg-[#f3f4f6] hover:bg-gray-100 border-black"
                            }`}
                        >
                            {label}
                        </button>
                    ))}
                </div>

                <div className="bg-[#f3f4f6] p-4 md:p-6 rounded-2xl space-y-6 border border-gray-300">
                    <div className="flex flex-col gap-4">
                        {statistics && (
                            <>
                                <StatCard
                                    title="–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏"
                                    value={`${statistics.chat.totalChatsCreated - statistics.chat.totalChatsClosed} –∏–∑ ${statistics.chat.totalChatsCreated}`}
                                    subtitle="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                                    trend="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                    trendColor="red"
                                    note="–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –º–æ–≥–ª–∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –∫–ª–∏–µ–Ω—Ç–æ–≤."
                                    iconSrc={positive}
                                />

                                <StatCard
                                    title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"
                                    value={`${Math.round(statistics.chat.averageFirstResponseTimeSeconds)} —Å–µ–∫.`}
                                    subtitle="–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                                    trend="–ù–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
                                    trendColor="green"
                                    note="–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ ‚Äî –¥–æ 15 —Å–µ–∫—É–Ω–¥."
                                    iconSrc={negative}
                                />

                                <StatCard
                                    title="–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Ç—ã"
                                    value={`${statistics.chat.totalChatsClosed} —á–∞—Ç–æ–≤`}
                                    subtitle={`–°–æ–∑–¥–∞–Ω–æ: ${statistics.chat.totalChatsCreated}`}
                                    trend={`${Math.round((statistics.chat.totalChatsClosed / (statistics.chat.totalChatsCreated || 1)) * 100)}% –∑–∞–∫—Ä—ã—Ç—ã—Ö`}
                                    trendColor="green"
                                    note="–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∑–∞–∫—Ä—ã–≤–∞–µ–º–æ—Å—Ç–∏."
                                    iconSrc={positive}
                                />

                                <StatCard
                                    title="–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"
                                    value="‚Äî"
                                    subtitle="–ü–æ–∫–∞ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è"
                                    trend="‚Äî"
                                    trendColor="green"
                                    note="–ú–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç –ø–æ —Å–µ—Å—Å–∏—è–º –æ–Ω–ª–∞–π–Ω."
                                    iconSrc={positive}
                                />
                            </>
                        )}
                    </div>

                    <div className="bg-[#f9fafb] rounded-xl shadow-[0px_4px_4px_rgba(0,0,0,0.25)] p-4 md:p-6 space-y-6 border-2">
                        <h2 className="text-lg md:text-xl font-bold">–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞–º</h2>
                        <div className="space-y-4">
                            <MessengerStat name="Telegram" value={215} color="bg-blue-600" />
                            <MessengerStat name="WhatsApp" value={123} color="bg-green-500" />
                            <MessengerStat name="Email" value={108} color="bg-pink-500" />
                            <MessengerStat name="Vk" value={73} color="bg-indigo-500" />
                        </div>
                        <p className="text-md text-black">
                            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –∫–∞–Ω–∞–ª–æ–≤ –µ–∂–µ–º–µ—Å—è—á–Ω–æ. –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞—Å—Ç–∏,
                            –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Å–∏–ª–∏–≤–∞–π—Ç–µ –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –≤–Ω–∏–º–∞–Ω–∏–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.
                        </p>
                    </div>
                </div>
            </main>
        </div>
    );
};

export default StatsPage;
